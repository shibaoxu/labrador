/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
plugins {
    id 'org.springframework.boot' version "2.0.3.RELEASE" apply false
    id 'io.spring.dependency-management' version "1.0.5.RELEASE" apply false
    id 'com.gorylenko.gradle-git-properties' version "1.4.21" apply false
    id 'io.franzbecker.gradle-lombok' version '1.14' apply false
}
ext {
    springCloudVersion = 'Finchley.RELEASE'
}

def javaApps = [
    ':authservice', ':commons', ':common-tests', ':eurekaservice', ':configservice'
]

def bootApps = javaApps - ':commons' - ':common-tests'

def cloudServer = [':eurekaservice', ':configservice']
def services = bootApps - cloudServer
def jsApps = [
]

def findProjects(names) {
    return names.collect({project(it)})
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    group = 'com.labrador'
    version = '0.0.1-SNAPSHOT'
}

configure(findProjects(javaApps)) {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'groovy'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.gorylenko.gradle-git-properties'
    apply plugin: 'io.franzbecker.gradle-lombok'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile){
       options.compilerArgs += ["-Xlint:unchecked"]
    }
    repositories {
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        mavenCentral()
    }


    lombok {
        version = "1.18.0"
        sha256 = ""
    }

    checkstyle {
        ignoreFailures = true
        checkstyleTest.enabled = false
    }

    findbugs {
        ignoreFailures = true
        findbugsTest.enabled = false        
    }
    tasks.withType (FindBugs) {
        reports {
            xml.enabled false
            html.enabled true
        }
    }
    jacoco {
        toolVersion = '0.8.1'
        reportsDir = file("$buildDir/reports/jacoco")
    }
    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/reports/jacoco/jacocoHtml")
        }
    }
    test {
        useJUnitPlatform()
    }

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
        dependencies {
            dependency 'org.codehaus.groovy:groovy-all:2.4.15'
            dependency 'io.github.http-builder-ng:http-builder-ng-core:1.0.3'
        }
    }
}
configure(findProjects(bootApps)){

    apply plugin: 'org.springframework.boot'

    bootRun {
        systemProperties  System.properties
    }

    test {
        systemProperty  'spring.profiles.active', System.getProperty('spring.profiles.active')
//        systemProperties = System.properties
    }

    springBoot {
        buildInfo()
    }
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        testImplementation('org.springframework.boot:spring-boot-starter-test'){
            exclude group:'junit', module:'junit'
        }
        testImplementation('org.codehaus.groovy:groovy-all')
        testImplementation('org.junit.jupiter:junit-jupiter-api')
        testImplementation("org.junit.jupiter:junit-jupiter-engine")
        testImplementation('org.springframework.security:spring-security-test')
        testImplementation('io.github.http-builder-ng:http-builder-ng-core')
        testImplementation project(':common-tests')

    }
}
configure(findProjects(services)){
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.cloud:spring-cloud-starter-oauth2'
        implementation project(':commons')
        runtimeOnly 'mysql:mysql-connector-java'
        runtimeOnly 'com.h2database:h2'
        runtimeOnly 'org.flywaydb:flyway-core'
        runtimeOnly 'org.springframework.boot:spring-boot-devtools'
    }
}

